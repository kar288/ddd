// Generated by CoffeeScript 1.10.0

/*
Copyright 2014 Clemens Nylandsted Klokmose, Aarhus University

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
var applyOp, deleteInText, deleteNode, insert, insertInText, root, setAttribute;

root = typeof exports !== "undefined" && exports !== null ? exports : window;

root.ot2dom = {};

applyOp = function(op, element) {
  var attributePath, charIndex, domPath, i, index, j, len, len1, path, ref, ref1;
  path = op.p;
  domPath = [];
  attributePath = false;
  if (path.length > 0) {
    if ((op.si != null) || (op.sd != null)) {
      charIndex = op.p.pop();
    }
    if (typeof path[path.length - 1] === 'string') {
      attributePath = true;
      if (path.length > 2) {
        ref = op.p.slice(0, +(path.length - 3) + 1 || 9e9);
        for (i = 0, len = ref.length; i < len; i++) {
          index = ref[i];
          domPath.push(index - 2);
        }
        domPath.push(path[path.length - 1]);
      } else {
        domPath.push(path[1]);
      }
    } else {
      ref1 = op.p;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        index = ref1[j];
        domPath.push(index - 2);
      }
    }
  }
  if (op.oi != null) {
    if (attributePath) {
      setAttribute($(element), domPath, op.oi);
    }
  }
  if (op.li != null) {
    if (!attributePath) {
      insert($(element), domPath, domPath, op.li);
    }
  }
  if (op.ld != null) {
    if (!attributePath) {
      deleteNode($(element), domPath);
    }
  }
  if (op.si != null) {
    if (!attributePath) {
      insertInText($(element), domPath, charIndex, op.si);
    }
  }
  if (op.sd != null) {
    if (!attributePath) {
      return deleteInText($(element), domPath, charIndex, op.sd);
    }
  }
};

insertInText = function(element, path, charIndex, value) {
  var event, newString, oldString, textNode;
  if (path.length > 1) {
    return insertInText(element.contents().eq(path[0]), path.slice(1, +path.length + 1 || 9e9), charIndex, value);
  } else {
    textNode = element[0].nodeType === 8 ? element[0] : element.contents().eq(path[0])[0];
    oldString = textNode.data;
    newString = oldString.substring(0, charIndex) + value + oldString.substring(charIndex, oldString.length);
    textNode.data = newString;
    event = new CustomEvent("insertText", {
      detail: {
        position: charIndex,
        value: value
      }
    });
    return textNode.dispatchEvent(event);
  }
};

deleteInText = function(element, path, charIndex, value) {
  var event, newString, oldString, textNode;
  if (path.length > 1) {
    return deleteInText(element.contents().eq(path[0]), path.slice(1, +path.length + 1 || 9e9), charIndex, value);
  } else {
    textNode = element.contents().eq(path[0])[0];
    oldString = textNode.data;
    newString = oldString.substring(0, charIndex) + oldString.substring(charIndex + value.length, oldString.length);
    if (newString.length === 0) {
      newString = '';
    }
    textNode.data = newString;
    event = new CustomEvent("deleteText", {
      detail: {
        position: charIndex,
        value: value
      }
    });
    return textNode.dispatchEvent(event);
  }
};

setAttribute = function(element, path, value) {
  if (path.length > 1) {
    return setAttribute(element.contents().eq(path[0]), path.slice(1, +path.length + 1 || 9e9), value);
  } else {
    return element.attr(path[0], value);
  }
};

insert = function(element, relativePath, actualPath, value) {
  var html, newPathNode, ns, parentPathNode, sibling, siblings;
  if (relativePath.length > 1) {
    insert(element.contents().eq(relativePath[0]), relativePath.slice(1, +relativePath.length + 1 || 9e9), actualPath, value);
  }
  if (relativePath.length === 1) {
    ns = root.util.getNs(element[0]);
    if (typeof value === 'string') {
      html = $(document.createTextNode(value));
    } else {
      html = $.jqml(value, ns);
    }
    sibling = element.contents().eq(relativePath[0]);
    if (sibling.length > 0) {
      html.insertBefore(element.contents().eq(relativePath[0]));
    } else if ((html[0].tagName != null) && html[0].tagName.toLowerCase() === "script") {
      element[0].appendChild(html[0]);
    } else {
      element.append(html);
    }
    parentPathNode = util.getPathNode(element[0]);
    newPathNode = util.createPathTree(html[0], parentPathNode, true);
    siblings = parentPathNode.children;
    return parentPathNode.children = (siblings.slice(0, relativePath[0]).concat([newPathNode])).concat(siblings.slice(relativePath[0], siblings.length));
  }
};

deleteNode = function(element, path) {
  var childIndex, parentPathNode, toRemove, toRemovePathNode;
  if (path.length > 1) {
    deleteNode(element.contents().eq(path[0]), path.slice(1, +path.length + 1 || 9e9));
  }
  if (path.length === 1) {
    toRemove = element.contents().eq(path[0]);
    parentPathNode = util.getPathNode(element[0]);
    toRemovePathNode = util.getPathNode(toRemove[0], parentPathNode);
    childIndex = parentPathNode.children.indexOf(toRemovePathNode);
    parentPathNode.children.splice(childIndex, 1);
    return toRemove.remove();
  }
};

root.ot2dom.applyOp = applyOp;

//# sourceMappingURL=ot2dom.js.map
